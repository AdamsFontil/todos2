(()=>{"use strict";var n={426:(n,e,o)=>{o.d(e,{Z:()=>A});var t=o(537),r=o.n(t),a=o(645),i=o.n(a)()(r());i.push([n.id,'* {\n    margin: 0;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n.gridContainer {\n    display: grid;\n    grid-template-rows: 3fr 16fr 1fr;\n    grid-row: 1fr 5fr 1fr;\n    --color: brown;\n}\n.title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(65, 65, 197);\n}\n.body {\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    --color: red;\n\n}\n.footer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    display: grid;\n    background-color: rgb(65, 65, 197);\n}\n.sidebar {\n    /* padding: 20px; */\n    /* padding: 30px; */\n    gap: 50px;\n    display: grid;\n    background-color: rgb(189, 189, 200);\n}\n.sidebar div {\n    margin: 20px;\n}\n.todos {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    /* padding: 20px; */\n}\n.todos div {\n    margin: 20px;\n\n}\n.list div:hover {\n    background-color: red;\n}\n.views div:hover {\n    background-color: red;\n}\n.projects div:hover {\n    background-color: red;\n\n}\n#myForm {\n    border-radius: 10px;\n    padding: 40px;\n    display: none; /* hidden by default */\n    position: fixed; /* stay in place */\n    z-index: 1; /* sit on top */\n    width: 600px; /* set the form width */\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    overflow: auto; /* enable scroll if needed */\n    background-color: rgb(0,0,0); /* fallback color */\n    background-color: rgba(11, 54, 225, 0.4); /* black w/ opacity */\n  }\n  #myForm2 {\n    border-radius: 10px;\n    padding: 40px;\n    display: none; /* hidden by default */\n    position: fixed; /* stay in place */\n    z-index: 1; /* sit on top */\n    width: 600px; /* set the form width */\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    overflow: auto; /* enable scroll if needed */\n    background-color: rgb(0,0,0); /* fallback color */\n    background-color: rgba(11, 54, 225, 0.4); /* black w/ opacity */\n  }\n  .todo {\n    display: grid;\n    grid-template-columns: .3fr 4fr 1fr 1fr 1fr;\n    grid-row: 1fr;\n    background-color: blue;\n  }\n.header {\n    background-color: pink;\n    display: grid;\n    grid-template-columns: 1.3fr 1fr;\n}\n.strikethrough {\n    position: relative;\n    display: grid;\n    grid-template-columns: .3fr 4fr 1fr 1fr 1fr;\n    grid-row: 1fr;\n    background-color: blue;\n  }\n\n  .strikethrough:before {\n    content: "";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    border-top: 2px solid;\n    transform: translateY(-50%);\n  }\n  .changeBackground {\n    background-color: green;\n  }\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,gDAAgD;AACpD;AACA;IACI,aAAa;IACb,gCAAgC;IAChC,qBAAqB;IACrB,cAAc;AAClB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,kCAAkC;AACtC;AACA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,YAAY;;AAEhB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,kCAAkC;AACtC;AACA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,SAAS;IACT,aAAa;IACb,oCAAoC;AACxC;AACA;IACI,YAAY;AAChB;AACA;IACI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,YAAY;;AAEhB;AACA;IACI,qBAAqB;AACzB;AACA;IACI,qBAAqB;AACzB;AACA;IACI,qBAAqB;;AAEzB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,aAAa,EAAE,sBAAsB;IACrC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,YAAY,EAAE,uBAAuB;IACrC,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,wCAAwC,EAAE,qBAAqB;EACjE;EACA;IACE,mBAAmB;IACnB,aAAa;IACb,aAAa,EAAE,sBAAsB;IACrC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,YAAY,EAAE,uBAAuB;IACrC,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gCAAgC;IAChC,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,wCAAwC,EAAE,qBAAqB;EACjE;EACA;IACE,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,sBAAsB;EACxB;AACF;IACI,sBAAsB;IACtB,aAAa;IACb,gCAAgC;AACpC;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,sBAAsB;EACxB;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,QAAQ;IACR,OAAO;IACP,QAAQ;IACR,qBAAqB;IACrB,2BAA2B;EAC7B;EACA;IACE,uBAAuB;EACzB",sourcesContent:['* {\n    margin: 0;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n.gridContainer {\n    display: grid;\n    grid-template-rows: 3fr 16fr 1fr;\n    grid-row: 1fr 5fr 1fr;\n    --color: brown;\n}\n.title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgb(65, 65, 197);\n}\n.body {\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    --color: red;\n\n}\n.footer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    display: grid;\n    background-color: rgb(65, 65, 197);\n}\n.sidebar {\n    /* padding: 20px; */\n    /* padding: 30px; */\n    gap: 50px;\n    display: grid;\n    background-color: rgb(189, 189, 200);\n}\n.sidebar div {\n    margin: 20px;\n}\n.todos {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    /* padding: 20px; */\n}\n.todos div {\n    margin: 20px;\n\n}\n.list div:hover {\n    background-color: red;\n}\n.views div:hover {\n    background-color: red;\n}\n.projects div:hover {\n    background-color: red;\n\n}\n#myForm {\n    border-radius: 10px;\n    padding: 40px;\n    display: none; /* hidden by default */\n    position: fixed; /* stay in place */\n    z-index: 1; /* sit on top */\n    width: 600px; /* set the form width */\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    overflow: auto; /* enable scroll if needed */\n    background-color: rgb(0,0,0); /* fallback color */\n    background-color: rgba(11, 54, 225, 0.4); /* black w/ opacity */\n  }\n  #myForm2 {\n    border-radius: 10px;\n    padding: 40px;\n    display: none; /* hidden by default */\n    position: fixed; /* stay in place */\n    z-index: 1; /* sit on top */\n    width: 600px; /* set the form width */\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    overflow: auto; /* enable scroll if needed */\n    background-color: rgb(0,0,0); /* fallback color */\n    background-color: rgba(11, 54, 225, 0.4); /* black w/ opacity */\n  }\n  .todo {\n    display: grid;\n    grid-template-columns: .3fr 4fr 1fr 1fr 1fr;\n    grid-row: 1fr;\n    background-color: blue;\n  }\n.header {\n    background-color: pink;\n    display: grid;\n    grid-template-columns: 1.3fr 1fr;\n}\n.strikethrough {\n    position: relative;\n    display: grid;\n    grid-template-columns: .3fr 4fr 1fr 1fr 1fr;\n    grid-row: 1fr;\n    background-color: blue;\n  }\n\n  .strikethrough:before {\n    content: "";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    border-top: 2px solid;\n    transform: translateY(-50%);\n  }\n  .changeBackground {\n    background-color: green;\n  }\n'],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],d=t.base?c[0]+t.base:c[0],l=a[d]||0,s="".concat(d," ").concat(l);a[d]=l+1;var u=o(s),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=r(p,t);t.byIndex=A,e.splice(A,0,{identifier:s,updater:f,references:1})}i.push(s)}return i}function r(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,r){var a=t(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=o(a[i]);e[A].references--}for(var c=t(n,r),d=0;d<a.length;d++){var l=o(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var r=void 0!==o.layer;r&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,r&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var a=o.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function o(t){var r=e[t];if(void 0!==r)return r.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,o),a.exports}o.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return o.d(e,{a:e}),e},o.d=(n,e)=>{for(var t in e)o.o(e,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),o.nc=void 0;var t={};(()=>{o.d(t,{y:()=>y});var n=o(379),e=o.n(n),r=o(795),a=o.n(r),i=o(569),A=o.n(i),c=o(565),d=o.n(c),l=o(216),s=o.n(l),u=o(589),p=o.n(u),f=o(426),C={};C.styleTagTransform=p(),C.setAttributes=d(),C.insert=A().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=s(),e()(f.Z,C),f.Z&&f.Z.locals&&f.Z.locals;const g=document.querySelector(".list");document.querySelector(".todosHeader"),document.querySelector(".todos");let m=()=>{console.log("showTask"),g.textContent="",y.forEach((function(n,e){const o=document.createElement("input");o.type="checkbox";const t=document.createElement("div");t.textContent=n.title,t.class="title";const r=document.createElement("div");r.textContent=n.dueDate;const a=document.createElement("div");a.className="editBtn",a.textContent="edit";const i=document.createElement("div");i.className="deleteBtn",i.textContent="X";const A=document.querySelector(".list"),c=document.createElement("div");c.className="todo",c.appendChild(o),c.appendChild(t),c.appendChild(r),c.appendChild(a),c.appendChild(i),A.appendChild(c),h(),b(),B()}))},h=()=>{console.log("strike"),document.querySelectorAll('input[type="checkbox"]').forEach((n=>{n.addEventListener("change",(function(){const e=n.closest("div");console.log("checkbox"),n.checked?(console.log("Checkbox is checked"),console.log(e),e.className="strikethrough"):(console.log("Checkbox is not checked"),console.log(e),e.className="todo")}))}))},b=()=>{console.log("edittask"),document.querySelectorAll(".editBtn").forEach((n=>{n.addEventListener("click",(function(){const e=n.parentElement;console.log("editBtn"),n=1,showForm(),console.log(e)}))}))},B=()=>{console.log("deletetask"),document.querySelectorAll(".deleteBtn").forEach((n=>{n.addEventListener("click",(function(){const e=n.parentNode;e.parentNode.removeChild(e);const o=e.getElementsByTagName("div")[0],t=y.find((n=>n.title===o.textContent));t?(console.log(t),console.log(y),y.splice(t,1),console.log(y)):console.log(`No match found for ${o.textContent}`)}))}))};document.querySelector(".list");const I=document.querySelector(".todosHeader"),v=document.querySelector(".todos");let y=[];const k=(n,e,o,t,r,a,i)=>({title:n,description:e,dueDate:o,priority:t,notes:a});(()=>{console.log("test");const n=k("trash","take it out","9/2/2021","high"),e=k("eat","take it out","9/3/2021","high"),o=k("sleep","take it out","9/4/2021","high"),t=k("repeat","take it out","9/5/2021","high"),r=k("run","take it out","9/2/2021","high"),a=k("bog","take it out","9/3/2021","high"),i=k("jog","take it out","9/4/2021","high"),A=k("fog","take it out","9/5/2021","high"),c=k("dog","take it out","9/2/2021","high"),d=k("sod","take it out","9/3/2021","high"),l=k("sock","take it out","9/4/2021","high"),s=k("ret","take it out","9/5/2021","high");y.push(n,e,o,t),y.push(r,a,i,A),y.push(c,d,l,s),console.log(y)})(),m(),document.querySelector(".week").addEventListener("click",(()=>{m()})),document.querySelector(".home").addEventListener("click",(()=>{m(),I.textContent="Home",v.appendChild(I)})),document.querySelector(".month").addEventListener("click",(()=>{m()})),document.querySelector(".today").addEventListener("click",(()=>{m()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,